[tox]
envlist = py39-airflow_2_2_3,manifest
toxworkdir = {toxinidir}/../../.tox/dbnd-aws

[dbnd]
home = {toxinidir}/../..
tests_emr = tests/test_emr_spark_task.py
tests = tests
modules = {[dbnd]home}/modules
plugins = {[dbnd]home}/plugins
orchestration = {[dbnd]home}/orchestration

[testenv]
# Python 3.6+ has a number of compile-time warnings on invalid string escapes.
# PYTHONWARNINGS=d and --no-compile below make them visible during the Tox run.
install_command = pip install --no-compile {opts} {packages}

# Prevent random setuptools/pip breakages like
# https://github.com/pypa/setuptools/issues/1042 from breaking our builds.
setenv =
	VIRTUALENV_NO_DOWNLOAD = 1
	DBND_HOME = {[dbnd]home}/..

    AIRFLOW_CONN_SPARK_EMR=spark://local
    AIRFLOW_CONN_AWS_DEFAULT=spark://local

	AIRFLOW_TEST_DB = {[tox]toxworkdir}/airflow-{envname}-unittests.db
	AIRFLOW__CORE__SQL_ALCHEMY_CONN = sqlite:///{env:AIRFLOW_TEST_DB}

    py37: PYTHON_VERSION=3.7
    py39: PYTHON_VERSION=3.9
    airflow_1_10_15: AIRFLOW_VERSION=1.10.15
    airflow_2_2_3: AIRFLOW_VERSION=2.2.3

passenv = AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN DBND__AWS_TESTS__CLUSTER
deps =
	-e {[dbnd]modules}/dbnd
    -e {[dbnd]orchestration}/dbnd-test-scenarios
	-e {[dbnd]orchestration}/dbnd-run[tests]
    -e {[dbnd]orchestration}/dbnd-docker
    -e {[dbnd]orchestration}/dbnd-spark

    airflow_2_2_3: apache-airflow[amazon,apache.spark]=={env:AIRFLOW_VERSION}
    airflow_2_2_3: -c https://raw.githubusercontent.com/apache/airflow/constraints-{env:AIRFLOW_VERSION}/constraints-no-providers-{env:PYTHON_VERSION}.txt
    airflow_2_2_3: apache-airflow-providers-amazon==2.4.0

whitelist_externals = rm

filterwarnings =
	once::Warning: Django>=1.5,<1.6
	ignore::ResourceWarning

commands =
	rm -f {env:AIRFLOW_TEST_DB}
	# we don't need databand db, only airflow
	airflow db init

	coverage erase
	pytest --cov dbnd_aws --run-aws  --junit-xml build/junit-{envname}.xml {[dbnd]tests} {posargs}
	coverage report

[testenv:py39-emr]
basepython = python3.9
commands =
    rm -f {env:AIRFLOW_TEST_DB}
	coverage erase
	# we don't need databand db, only airflow
    airflow db init
	pytest --cov dbnd_aws --run-aws --run-emr --junit-xml build/junit-{envname}.xml {[dbnd]tests_emr} {posargs}
	coverage report

[testenv:manifest]
basepython = python3.9
deps = check-manifest
skip_install = true
commands = check-manifest
